// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  UNKOWN
  USER
  ADMIN
}

enum EpisodeType {
  EPISODE
  OVA
  ONA
}

enum ScheduleType {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
  RANDOM
  UPCOMING
}

enum AnimeStatus {
  ONGOING
  FINISHED
  COMINGSOON
}

model Admin {
  id        String    @id @default(uuid())
  username  String    @unique @db.VarChar(150)
  name      String    @db.VarChar(150)
  email     String    @unique @db.VarChar(325)
  password  String    @db.Text
  gender    Gender    @default(UNKOWN)
  createdAt DateTime  @default(now())
  updatedAt DateTime?
}

model Users {
  id              String    @id @default(uuid())
  username        String    @unique @db.VarChar(150)
  name            String?   @db.VarChar(150)
  email           String    @unique @db.VarChar(325)
  password        String    @db.Text
  gender          Gender    @default(UNKOWN)
  profile_picture String?   @db.Text
  profile_banner  String?   @db.Text
  createdAt       DateTime  @default(now())
  updatedAt       DateTime?
  Anime           Anime[]
}

model Studio {
  id        String  @id @default(uuid())
  name      String
  isDeleted Boolean @default(false)
  Anime     Anime[]
}

model Genre {
  id         String       @id @default(uuid())
  name       String
  isDeleted  Boolean      @default(false)
  AnimeGenre AnimeGenre[]
}

model Category {
  id        String  @id @default(uuid())
  name      String
  isDeleted Boolean @default(false)
  Anime     Anime[]
}

model Anime {
  id             String          @id @default(uuid())
  title          String          @db.VarChar(512)
  alternateTitle String?         @db.VarChar(512)
  slug           String          @unique @db.VarChar(512)
  synopsis       String?         @db.VarChar(2500)
  poster         String?         @db.Text
  releaseDate    String?
  totalEpisode   Int?            @default(0)
  statusAnime    AnimeStatus
  categoryId     String
  category       Category        @relation(fields: [categoryId], references: [id])
  studioId       String?
  studio         Studio?         @relation(fields: [studioId], references: [id])
  createdById    String
  createdBy      Users           @relation(fields: [createdById], references: [id])
  createdAt      DateTime        @default(now())
  updatedAt      DateTime?
  isDeleted      Boolean         @default(false)
  deletedAt      DateTime?
  animeGenre     AnimeGenre[]
  AnimeEpisode   AnimeEpisode[]
  AnimeSchedule  AnimeSchedule[]
}

model AnimeGenre {
  animeId String
  anime   Anime  @relation(fields: [animeId], references: [id])
  genreId String
  genre   Genre  @relation(fields: [genreId], references: [id])

  @@unique([animeId, genreId])
}

model AnimeEpisode {
  id            String   @id @default(uuid())
  animeId       String
  anime         Anime    @relation(fields: [animeId], references: [id])
  episodeNumber Int      @db.SmallInt
  episodeSource String?  @db.Text
  createdAt     DateTime @default(now())
}

model AnimeSchedule {
  id           String       @id @default(uuid())
  animeId      String
  anime        Anime        @relation(fields: [animeId], references: [id])
  scheduleType ScheduleType

  @@unique([animeId, scheduleType])
}
